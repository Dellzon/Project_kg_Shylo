//параметри камери
float4x4 m_view_proj;
float4x4 m_iview;
//джерело світла
float4 v_lig_dir;
float4 v_lig_pos;
float4 v_lig_color, v_amb_color;
//параметри об'єкта
float4x4 m_world;
float4 v_obj_color;
float f_power, f_spec_level;

struct s_vertex2
{
	float4 pos: POSITION;
	float3 nor: NORMAL;
};

struct s_output2
{
	float4 pos: POSITION;
	float3 nor: TEXCOORD0;
	float3 eye: TEXCOORD1;
	float3 wpos: TEXCOORD2;
};

s_output2 vs_simple(s_vertex2 i)
{
	s_output2 o;
	float4 P = mul(i.pos, m_world);
	o.wpos = P.xyz;
	o.pos = mul(P, m_view_proj);
	o.nor = mul(i.nor, (float3x3)m_world);
	o.eye = mul(float3( 0.f, 0.f, 1.f ), (float3x3)m_iview);
	return o;
}

float4 ps_wire(s_output2 i): COLOR
{
	return float4(v_obj_color.rgb, 1.0);
}

technique wire
{
	pass P0
	{

			FillMode = Wireframe;
			FogEnable = false;
			AlphaBlendEnable = false;
			AlphaTestEnable = false;
			ZEnable = true;
			ZFunc = LessEqual;
			CullMode = CCW;
			VertexShader = compile vs_2_0 vs_simple();
			PixelShader = compile ps_2_0 ps_wire();
	}
}

float3 lambert_law( float3 L, float3 N )
{
	float LdN = max( 0.0, dot( L, N ) );
	return v_lig_color.rgb * LdN;
}
float4 ps_lambert( s_output2 i ) : COLOR
{
	float3 color = v_obj_color.rgb;
	float3 N = normalize( i.nor );
	float3 L = normalize( v_lig_dir.xyz );
	float3 ambient = v_amb_color.rgb;
	float3 diffuse = lambert_law( L, N );
	return float4( ( ambient + diffuse ) * color, 1.f );
}

technique lambert
{
	pass P0
	{
		FillMode = Solid;
		FogEnable = false;
		AlphaBlendEnable = false;
		AlphaTestEnable = false;
		ZEnable = true;
		ZFunc = LessEqual;
		CullMode = CCW;
		VertexShader = compile vs_2_0 vs_simple();
		PixelShader = compile ps_2_0 ps_lambert();
	}
}
float3 phong_law( float3 L, float3 N, float3 V )
{
		float LdN = max( 0.0, dot( L, N ) );
		float3 R = reflect( -L, N );
		float3 specular = v_lig_color.rgb * f_spec_level *
			pow( max( 0.0, dot( V, R ) ), f_power );

		specular *= min( 1.0, LdN * 10.0 );
		return specular;
}
float4 ps_phong( s_output2 i ) : COLOR
{
		float3 color = v_obj_color.rgb;
		float3 N = normalize( i.nor );
		float3 V = -normalize( i.eye );
		float3 L = normalize( v_lig_dir.xyz );
		float3 ambient = v_amb_color.rgb;
		float3 diffuse = lambert_law( L, N );
		float3 specular = phong_law( L, N, V );
		//return float4( ( ambient + diffuse ) * color + specular, 1.f );
		return float4( specular, 1.f );
}
technique phong
{
	pass P0
	{
		FillMode = Solid;
		FogEnable = false;
		AlphaBlendEnable = false;
		AlphaTestEnable = false;
		ZEnable = true;
		ZFunc = LessEqual;
		CullMode = CCW;
		VertexShader = compile vs_2_0 vs_simple();
		PixelShader = compile ps_2_0 ps_phong();
	}
}